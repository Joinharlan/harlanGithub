/*******************************************************/
/* VPP202API.h                                        */
/* Define the Application Program Interface            */
/* for view100 EMV test terminals                      */
/*******************************************************/
//#if ProtocolType == 55
//---------------------------------
//选择应用

#define LOSNUM					0x02
#define	APP1NUM					0x00
#define	APP2NUM					0x01
#define APP3NUM					0x03


#define	CURRENT					APP1NUM		//当前的应用



 //#endif
#ifndef  _LOS_API_H
#define  _LOS_API_H

//Standard header files
//#include <stdio.h>
//#include <stdlib.h>
//#include <string.h>
//#include <ctype.h>

//TODO:  Add other header files

#ifndef BYTE
#define BYTE   unsigned char
#endif

#ifndef byte
#define byte   unsigned char
#endif

#ifndef WORD
#define WORD   unsigned short
#endif

#ifndef DWORD
#define DWORD  unsigned long
#endif

#ifndef uchar
#define uchar  unsigned char
#endif

#ifndef uint
#define uint   unsigned int
#endif

#ifndef ulong
#define ulong  unsigned long
#endif

#ifndef ushort
#define ushort unsigned short
#endif

#ifndef TRUE
#define TRUE 1
#endif

#ifndef FALSE
#define FALSE 0
#endif

#ifdef __cplusplus
#define __I     volatile                  /*!< defines 'read only' permissions      */
#else
#define __I     volatile const            /*!< defines 'read only' permissions      */
#endif

#define __O     volatile                  /*!< defines 'write only' permissions     */
#define __IO    volatile                  /*!< defines 'read / write' permissions   */

typedef int  s32;
typedef short s16;
typedef char  s8;

typedef const int sc32;  /*!< Read Only */
typedef const short sc16;  /*!< Read Only */
typedef const char sc8;   /*!< Read Only */

typedef __IO int    vs32;
typedef __IO short  vs16;
typedef __IO char   vs8;

typedef __I int vsc32;  /*!< Read Only */
typedef __I short vsc16;  /*!< Read Only */
typedef __I char vsc8;   /*!< Read Only */

typedef unsigned int   u32;
typedef unsigned short u16;
typedef unsigned char  u8;

typedef const unsigned int   uc32;  /*!< Read Only */
typedef const unsigned short uc16;  /*!< Read Only */
typedef const unsigned char  uc8;   /*!< Read Only */

typedef __IO unsigned int  vu32;
typedef __IO unsigned short vu16;
typedef __IO unsigned char  vu8;

typedef __I unsigned int vuc32;  /*!< Read Only */
typedef __I unsigned short vuc16;  /*!< Read Only */
typedef __I unsigned char vuc8;   /*!< Read Only */

//-----------------------------------------------------------------------
//typedef unsigned char	byte;
//typedef unsigned char	BYTE;
//typedef unsigned char	uchar;
typedef	unsigned short	word;
//typedef unsigned short	WORD;
typedef	unsigned int	dword;
//typedef unsigned int	DWORD;

#define BPK_DEBUG
#define DLL_NOT_SWI
//#undef DLL_NOT_SWI

/*defined by Makefile*/
//#define SENSOR_ENABLE
//#undef SENSOR_ENABLE

#define VOSSIGN_ENABLE
#undef VOSSIGN_ENABLE

#define VOSTRANSKEY_INIT
//#undef VOSTRANSKEY_INIT

#define SELFCHECK_ENABLE
#undef SELFCHECK_ENABLE

#define DEBUG_ADJUST_REGS
#undef DEBUG_ADJUST_REGS

#define PRODUCT_TYPE          "V10S"
#define PRODUCT_TYPE_LEN      7

#define MMKEY_TYPE        0x00
#define PIN_MKEY_TYPE     0x01  //用于加密PINKEY的MK
#define PINKEY_TYPE       0x02
#define MACKEY_TYPE       0x03
#define MAC_MKEY_TYPE     0x04  //用于加密MACKEY的MK 
#define FKEY_TYPE         0x05  
#define PTK_TYPE          0x0A
#define TMACK_TYPE        0x0B

#define AUTHPIN_MK_TYPE   0x11
#define AUTHPINK_TYPE     0x12
#define AUTHMACK_TYPE     0x13
#define AUTHMAC_MK_TYPE   0x14
#define AUTHOFFPINK_TYPE  0x15

#define AUTHAPP_TYPE      0x20   //用于APP签名认证
#define AUTHVOS_TYPE      0x30   //
#define AUTHLCD_TYPE      0x40   //用于LCD应用认证
#define AUTHMDK_TYPE      0x50

#define SK_MACK_TYPE      0x60  //用于计算PINK或MACK的MAC

#define DUKPTK_TYPE       0x80

/*
16M sdram :   c0000000-c0800000  : vos     (8m)
              20800000-20c00000  : app     (4m)
              20c00000-20e00000  : app man (2m)
              20e00000-20f00000  : reserve (1m)
              20f00000-21000000  : font and dll (1m)

8M flash  :   D0000000-D0800000  : vos +file (8m)

*/

//#define APP_APPMAN_FLAG_SPACE  0x20700008
#define APP_RUN_SPACE          0x20500000
#define APPMAN_RUN_SPACE       0x20400000
#define FONTLIB_STARTADDR      0xC0310000

//#define VOS_SAVE_ADDR    0xD0010000
#define VOS_MINI_LEN     102400
#define VOS_TAIL_LEN     30

//错误状态
#define	SUCCESS								0x00	//成功
#define	NOKEY									0x01	//索引号不存在

#define	VERIFY_ERR								0x08	//校验失败
#define	INPUT_VAL_ERR							0x0A	//MAC参数不合法

//=================================================
//               System functions
//==================================================
int s_SystemInit(void);
int s_SystemTestSelf(void);
//void s_DelayUs(unsigned long usec);

uchar Lib_AppInit(void);
void Lib_DelayMs(unsigned short ms);
int Lib_GetLastError(void);
//for speak
void s_BeepInit(void);
void Lib_Beep(void);
void Lib_Beef(BYTE mode,int DlyTimeMs);

//for real time
#define TIME_FORMAT_ERR         (-900)
#define TIME_YEAR_ERR           (-901)
#define TIME_MONTH_ERR          (-902)
#define TIME_DAY_ERR            (-903)
#define TIME_HOUR_ERR           (-904)
#define TIME_MINUTE_ERR         (-905)
#define TIME_SECOND_ERR         (-906)
#define TIME_WEEK_ERR           (-907)
#define TIME_SET_ERR            (-908)
#define TIME_GET_ERR            (-909)
#define TIME_RAMADDR_OVER       (-910)
#define TIME_RAMLEN_OVER        (-911)

void s_InitRtc(void);
int Lib_SetDateTime(uchar *datetime);
int Lib_GetDateTime(uchar *datetime);

void s_TimeInit(void);
//int s_ReadDS1302(uchar start_addr,uchar read_len,uchar *read_data);
//int s_WriteDS1302(uchar start_addr,uchar write_len,uchar *write_data);

//for timer event
void s_TimerInit(void);
int SetTimerEvent(ushort uElapse10ms, void (*TimerFunc)(void));
int s_SetTimerEvent(ushort uElapse10ms, void (*TimerFunc)(void));
void KillTimerEvent(int handle);
void s_KillTimerEvent(int handle);
void s_SetTimer(uchar TimerNo, ulong count);
ulong s_CheckTimer(uchar TimerNo);

unsigned char Lib_SetTime( unsigned char *str);
unsigned char Lib_GetTime(unsigned char *str);
void Lib_WakeUp(void);
void Lib_SleepOn(void);

/****************************************************************************************
* 函 数 名: Lib_TimerSet
* 函数功能: 启动一个用户指定的定时器，最小定时单位为10毫秒。
*			          定时器最大定时时间为65535个10毫秒
* 入口参数: TimerID	用户指定的定时器编号
*			Cnts		定时时间(10MS个数)
* 返 回 值: 无
* 备    注: 系统共有5个定时器供应用程序使用, 其编号为0~4. 对于非法编号, 
*  			     	  系统将以TimerID%5为定时器编号, TimerCheck()函数是以同样方式处理TimerID的。
*****************************************************************************************/

void Lib_TimerSet(unsigned char TimerID, unsigned short Cnts);

/****************************************************************************************
* 函 数 名: Lib_TimerCheck
* 函数功能: 检查一个指定定时器的当前值（10毫秒的个数）10毫秒。
* 入口参数: TimerID - 用户指定的定时器号
* 返 回 值: 定时器的剩余时间
* 备    注: 剩余时间为0表示定时器定时时间到
*****************************************************************************************/

unsigned short Lib_TimerCheck(unsigned char TimerID);

/****************************************************************************************
* 函 数 名: Lib_StopTimer
* 函数功能: 一个指定定时器停止计数
* 入口参数: TimerID - 用户指定的定时器号
* 返 回 值: 
* 备    注: 
*****************************************************************************************/
void Lib_TimerStop(uchar TimerNo);

//for all hardware and software version
uchar Lib_ReadSN(BYTE *SerialNo);
uchar Lib_WriteSN(BYTE *SerialNo);

int Lib_EraseSN(void);

unsigned char Lib_ReadTerSN(unsigned char *SN,unsigned char no);
//uchar GetMagHardVer(void);  //AN1
//uchar GetMainHardVer(void);//AN0
//int Lib_ReadVerInfo(uchar *VerInfo, uchar *DllInfo);
unsigned char Lib_ReadVerInfo(unsigned char *VerInfo);

void Lib_Reboot(void);
void Lib_GetRand(uchar *out_rand ,uchar  out_len);

#define OFF_BASE_ERR         (-800)

// int Lib_OnBase(void);
uint Lib_GetSysClk(void);
// int Lib_GetBatteryVolt(void);

#define LCD_LED1       ((unsigned short)1<<0)
#define LCD_LED2       ((unsigned short)1<<1)
#define LCD_LED3       ((unsigned short)1<<2)
#define LCD_LED4       ((unsigned short)1<<3)
void Lib_LedInit(void);
void Lib_LedOn(BYTE mask);
void Lib_LedOff(BYTE mask);
WORD Lib_LedState(void);

void Lib_SystemTimeInit(void);
void Lib_BkpWrite (BYTE addr,BYTE *dat,WORD len);
unsigned char  Lib_FlashRead(DWORD addr, BYTE *dat, DWORD len);
unsigned char  Lib_FlashWrite(DWORD addr, BYTE *dat, DWORD len);
uchar Lib_Erase_Flash_Sector(unsigned int addr,unsigned int ct);
uchar Lib_Flash_str_WriteDirect(unsigned int addr,unsigned int l,uchar *str);
uchar Lib_Erase_pFlash_Sector(unsigned int addr,unsigned int ct,u8 type);
uchar Lib_Write_pFlash(unsigned int addr,unsigned int l,u8 *str,u8 mode,u8 type);
uchar Lib_Read_pFlash(unsigned int addr,unsigned int l,u8 *str,u8 type);
//unsigned char  Lib_IFlashRead(unsigned long addr, BYTE *dat, unsigned short len);
//unsigned char  Lib_IFlashWrite(unsigned long addr, BYTE *dat, unsigned short len);
void Lib_IFlashInit(uchar Reset_flag,unsigned char nMode);
uchar Lib_FlashGet_Byte(unsigned int address);
uchar Lib_FlashSet_Byte(uchar bVal,unsigned int addr);
void Lib_FlashGet_Str(unsigned int address,unsigned short nLen,uchar *str);
uchar Lib_FlashSet_Str(unsigned int addr,unsigned short nLen,uchar *str);
uchar Lib_FlashDel_Number(unsigned int count,unsigned int index,uchar max_count,uchar ip);
uchar Lib_FlashMess_Save(unsigned int count,unsigned int address,unsigned int index,unsigned short max_count,unsigned short lenght,uchar w_flag,uchar *buf);
uchar Lib_DelICCardCapkRecordAll(void);
uchar Lib_DelICCardAidRecordAll(void);
uchar Lib_DelICCardAidListRecordAll(void);
uchar Lib_SaveICCardAidRecord(uchar *InData);
uchar Lib_SaveICCardAidListRecord(u8 *InData);
uchar Lib_SaveICCardCapkRecord(uchar *InData);

unsigned char Lib_UpdataTerm_MK_USB(void);
unsigned char Lib_UpdataTerm_MK_COM(unsigned char bDownMode);
unsigned char Lib_UartLoadMk(void);
void Lib_DownLoadPara(void);
void Lib_RemoteUpdate(void);
void Lib_wait_keytone_over(void);
void Lib_SavePBOCDefaultPara(void);
unsigned char Lib_QRCODE_LEncodeData(int size, unsigned char *string,unsigned char *prtpicture);


u8 Lib_RmoteAPP(u8 appid,u8 mode);
u8 Lib_WriteAPP(u8 appid,u8 mode);

//=================================================
//               KeyBoard functions
//==================================================
#if 0
#define KEYF1            0x01
#define KEYF2            0x02
#define KEYF3            0x03
#define KEYF4            0x04
#define KEYF5            0x09
#define KEYF6            0x0a

#define KEY1             0x31
#define KEY2             0x32
#define KEY3             0x33
#define KEY4             0x34
#define KEY5             0x35
#define KEY6             0x36
#define KEY7             0x37
#define KEY8             0x38
#define KEY9             0x39
#define KEY0             0x30
#define KEYCLEAR         0x08
#define KEYALPHA         0x07
#define KEYUP            KEYF1//0x05
#define KEYDOWN          KEYF2//0x06
#define KEYFN            0x15
#define KEYMENU          0x14
#define KEYENTER         0x0d
#define KEYCANCEL        0x1b
#define KEYBACKSPACE     0x1c
#define KEYPRINTERUP     0x1d
#if 0
#define NOKEY            0xff
#endif
#define KEYBANK          0x1e
#define KEYTEL           0x1f
#define KEYREDAIL        0x20
#define KEYMIANTI        0x21
#define KEYHOTLINE       0x22

#endif

//按键定义
#define	KEY_0    				0x30		//数字0
#define	KEY_1    				0x31		//数字1
#define	KEY_2    				0x32		//数字2
#define	KEY_3    				0x33		//数字3
#define	KEY_4    				0x34		//数字4
#define	KEY_5    				0x35		//数字5
#define	KEY_6    				0x36		//数字6
#define	KEY_7    				0x37		//数字7
#define	KEY_8    				0x38		//数字8
#define	KEY_9    				0x39		//数字9

#define KEY1             KEY_1
#define KEY2             KEY_2
#define KEY3             KEY_3
#define KEY4             KEY_4
#define KEY5             KEY_5
#define KEY6             KEY_6
#define KEY7             KEY_7
#define KEY8             KEY_8
#define KEY9             KEY_9
#define KEY0             KEY_0

#define	KEY_STAR				0x2a		//*号
#define KEY_POUND				0x23		//#号

#define	KEY_DEL					0x93			//删除
//#define	KEY_InputMode 			KEY_POUND	//输入法

#define	KEY_QUIT	  			0x87		//退出
#define	KEY_RET					0x98		//返回

#define	KEY_UP					0x99		//上
#define	KEY_DOWN				0x9A		//下
#define	KEY_LEFT				0x9B		//左
#define	KEY_RIGHT				0x9C		//右

#define	KEYUP					KEY_UP
#define	KEYDOWN					KEY_DOWN

#define	KEY_ENTER				0x0d		//确认/菜单键

#define	KEYENTER				KEY_ENTER
#define KEYCANCEL				KEY_RET

#define	KEY_NULL         		0xFF		//空键

#define	KEY_FUNC				0x96        //加了功能按键H80
#define	KEY_MENU				0x9F        //加了菜单按键H80

#if	TERMAL_TYPE == T_H60
#define	KEY_FUNC				0x96
#define	KEY_MENU				0x9F
#define	KEY_InputMode 			0x9e		//输入法
#else
#define	KEY_FUNC				KEY_LEFT
#define	KEY_MENU				KEY_RIGHT
#define	KEY_InputMode 			KEY_POUND	//输入法
#endif

#define KB_NoKey_Err        (-1000)
#define KB_InputPara_Err    (-1010)
#define KB_InputTimeOut_Err (-1011)
#define KB_UserCancel_Err   (-1012)
#define KB_UserEnter_Exit   (-1013)

int s_KbInit(void);
uchar Lib_KbGetCh(void);
uchar Lib_KbUnGetCh(void);
int Lib_KbCheck(void);
void Lib_KbFlush(void);
void Lib_KbSound(uchar mode,ushort DlyTimeMs);
void Lib_KbMute(uchar mode);
unsigned char Lib_KbGetString(uchar *str,uchar minlen, uchar maxlen,uchar mode,ushort timeoutsec);
unsigned char Lib_KbGetHzString(uchar *outstr, uchar maxlen, ushort timeoutsec);

unsigned char Lib_KbGetKey(void);
unsigned char Lib_Kbhit(void);

unsigned char  Lib_KbSleepCheck(void);
int Lib_KbInputFuntion(u16 xx,u16 yy,uchar MaxLen,uchar MinLen,uchar *IInbuf,uchar *Outbuf,uchar nDisIndex,uchar *Inbuf,uchar nVerify,u32 timeout);
int Lib_KbInputFuntionHz(u16 xx,u16 yy,uchar MaxLen,uchar *IInbuf,uchar *Outbuf,uchar nDisIndex,uchar InputMod,u32 timeout);



//----------------------------------------------------
//GSM AT命令返回值定义
//----------------------------------------------------
#define	RSP_OK_ER				0x01
#define	RSP_NEW_CK				0x02
#define	RSP_CONNET				0x03
#define	RSP_CONNET_STAT			0x04
#define	RSP_REVDATA				0x05
#define	RSP_DEACT_STAT			0x06

#define	RSP_NORMTIMEOUT			200
//=================================================
//               LCD Display functions
//==================================================

#define LCD_t_x_s_add       50      //标题X的起始地址
#define LCD_t_y_s_add       10      //标题Y的起始地址	12
#define LCD_n_x_s_add       20      //内容X的起始地址
#define LCD_n_y_s_add       LCD_t_y_s_add+LCD_y_p_add +LCD_y_p_add      //内容y的起始地址
#define LCD_X_H_X_s_add     200     //机器型号的X起始地址
#define LCD_X_H_Y_s_add     LCD_y_p_add+LCD_t_y_s_add     					//机器型号的Y起始地址
#define LCD_x_p_add         32      //x偏移地址


#define LCD_y_p_add         34      //y偏移地址	40
#define LINE_SIZE			34
#define LCD_add_line1       10                  //标题行
#define LCD_add_line2       LCD_add_line1+LINE_SIZE    //偏移量 36
#define LCD_add_line3       LCD_add_line2+LINE_SIZE
#define LCD_add_line4       LCD_add_line3+LINE_SIZE
#define LCD_add_line5       LCD_add_line4+LINE_SIZE
#define LCD_add_line6       LCD_add_line5+LINE_SIZE
#define LCD_add_line7       LCD_add_line6+LINE_SIZE

#define lcd_320X240 1

//--------------------------------------------------------------
//切换应用用到的宏
#define	TFT320X240_LINE1	10
#define	TFT320X240_LINE2	TFT320X240_LINE1+LINE_SIZE
#define	TFT320X240_LINE3	TFT320X240_LINE2+LINE_SIZE
#define	TFT320X240_LINE4	TFT320X240_LINE3+LINE_SIZE
#define	TFT320X240_LINE5	TFT320X240_LINE4+LINE_SIZE
#define	TFT320X240_LINE6	TFT320X240_LINE5+LINE_SIZE
#define	TFT320X240_LINE7	TFT320X240_LINE6+LINE_SIZE
#define	TFT320X240_LEND		TFT320X240_LINE7+LINE_SIZE

#define ASCII       0x00
#define CFONT       0x01
#define REVER       0x80

#define SCR_NORMAL  0
#define SCR_REVER   0x80
#define	SCR_ASCII	0x01 //5x7
#define	SCR_12X12	0x02 //12x12
#define	SCR_16X16	0x03 //16x16
#define	SCR_24X24	0x04 //24x24
#define	SCR_32X32	0x05

#define SCR_XY	    0x05 //原始位置显示图标

#define SCR_BLANK   0x00 //空白行
#define SCR_BLACK   0x01 //黑色行

#define	SCR_RIGHT	0x20	//右显示
#define	SCR_CENTER 	0x10	//居中

#define GRAY_MAX_VALUE      60
#define GRAY_MIN_VALUE      40
#define DEFAULT_GRAY_BASE   40 //52  

#define GRAY_MAX_LEVEL		20
#define GRAY_MIN_LEVEL		1
#define DEFAULT_GRAY_LEVEL	10 //10->18

#define  LCD_SetFont_Err   (-1500)
#define  LCD_GetFont_Err   (-1501)

#define RED  	0xf800
#define GREEN	0x07e0
#define BLUE 	0x001f
#define WHITE	0xffff
#define BLACK	0x0000
#define YELLOW  0xFFE0
#define GRAY0   0xEF7D   
#define GRAY01  0x8410+0x150 
#define GRAY1   0x8410      
#define GRAY2   0x4208      
#define BROWN   0xB38C 

#define	DSP_NORMAL	0x00
#define	DSP_UPLINE	0x02
#define	DSP_DOWNLINE 0x01
#define	DSP_CENTER	0x20
#define	DSP_RIGHT	0x10



typedef enum{LCD_128X64 =0, LCD_320X240 = 1} LcdMold;
enum{
	FONT_24 = 0,// 24 X 24
	FONT_16,	// 16 X 16
	FONT_12,    // 12 X 12
};

#ifndef RGB_TYPE
#define RGB_TYPE unsigned short
#endif 

#ifndef ASCII_FONT
#define ASCII_FONT		0
#endif

#ifndef GB2312_FONT
#define GB2312_FONT		1
#endif

#define X_MULTI			1
#define Y_MULTI			1  
 
#define DEFAULT_ASCII_FONT_HEIGH	8
#define DEFAULT_EXT_FONT_HEIGH		16
 
#define  ICON_PHONE      1    // phone 电话
#define  ICON_SIGNAL     2    // wireless signal 信号
#define  ICON_PRINTER    3    // printer 打印机
#define  ICON_ICCARD     4    // smart card IC卡
#define  ICON_LOCK       5    // lock 锁
#define  ICON_SPEAKER    6    // speeker 扬声器
#define  ICON_UP         7    // up 向上
#define  ICON_DOWN       8    // down 向下
#define  CLOSEICON       0    // 关闭图标[针对所有图标]
#define  OPENICON        1    // 显示图标[针对打印机、IC卡、锁、电池、向上、向下]

#define LCD_WIDTH_MINI	122
#define LCD_HIGH_MINI	32

extern void DrawThreeLine(void);
int   s_LcdInit(void);
void  Lib_LcdCls(void);
void  Lib_LcdClrLine(BYTE startline, BYTE endline);
void  Lib_LcdSetBackLight(BYTE mode);
void  Lib_LcdSetGray(BYTE level);
void  Lib_LcdGotoxy(BYTE x, BYTE y);
int   Lib_LcdSetFont(BYTE AsciiFontHeight, BYTE ExtendFontHeight, BYTE Zoom);
int   Lib_LcdGetFont(BYTE *AsciiFontHeight, BYTE *ExtendFontHeight, BYTE *Zoom);
BYTE  Lib_LcdSetAttr(BYTE attr);
//void  Lib_LcdSetFontColor(RGB_TYPE FontColor, RGB_TYPE BackGroundColor);
//int   Lib_Lcdprintf(char *fmt,...);

void  Lib_LcdPrintxy(BYTE x, BYTE y, BYTE mode, char *str,...);
void  Lib_LcdDrawPlot(BYTE XO, BYTE YO, BYTE Color);
//void  Lib_LcdDrawLogo(BYTE *pDataBuffer);

void Lib_ScrCls(unsigned char mold);
void Lib_ScrClrLine(unsigned short startline,unsigned short endline,unsigned char mold,unsigned short color);
void Lib_ScrGotoxy  (unsigned short x,unsigned short y,unsigned char mold);
int Lib_ScrPrintf(unsigned char attr, unsigned char mold, unsigned short color,char *format_str,...);
void Lib_ScrPrintxy  ( unsigned short col, unsigned short row, unsigned char mode, unsigned char mold, unsigned short color, unsigned char *format_str,...);
void Lib_ScrClrDot(unsigned char x,unsigned char y,unsigned char bNum);

void  Lib_ScrDrawLogo(u16 width, u16 high, unsigned char *logo,unsigned char bID);
void Lib_ScrDrawLogoxy(u16 x, u16 y, u16 width, u16 high,unsigned char *logo, u8 mold);

void Lib_ScrBackLight(unsigned char mode,unsigned char mold);

void  Lib_LcdDrawBox(BYTE x1,BYTE y1,BYTE x2,BYTE y2);
int   Lib_LcdRestore(BYTE mode);
//void Lib_LcdSetIcon(int byIconNo, int byMode);

void  Lib_LcdGetSize(BYTE * x, BYTE *y);
void  Lib_LcdDrawLine(BYTE x1, BYTE y1, BYTE x2, BYTE y2, BYTE byColor);
BYTE  Lib_LcdGetSelectItem(BYTE *pbyItemString, BYTE byItemNumber, BYTE byExitMode);
BYTE  Lib_LcdGetSelectItemCE(BYTE *pbyChnItemString, BYTE *pbyEngItemString,
                     BYTE byItemNumber, BYTE byExitMode);
void  Lib_LcdPrintfCE(char *pCHN , char *pEN);
void  Lib_LcdPrintxyCE(BYTE col, BYTE row, BYTE mode, char *pCHN , char *pEN);
void  Lib_LcdPrintxyExtCE(BYTE col, BYTE row, BYTE mode, char * pCHN, char * pEN, int iPara);
BYTE  Lib_LcdShowItem(BYTE *pbyItemString, BYTE byItemNumber, BYTE byShowPage);
void Lib_ScrPLot(unsigned short X,unsigned short Y,unsigned char action,unsigned char mold);//unsigned char
void Lib_ScrGray(unsigned char level,unsigned char mold);

void Lib_ScrClrOneLine(unsigned char y,unsigned char mode, unsigned char mold,unsigned short color);
void Lib_ScrDrawLine (u16 x1, u16 y1, u16 x2, u16 y2, u32 byColor);


u8 Lib_ScrClrArea(u8 wsx,u8 wsy,u8 wex,u8 wey,u16 csx,u16 csy,u16 cex,u16 cey,u16 color);
void Lib_SetFontColr(u16 cfont, u16 cback);

//========================================
//     Encrypt and decrypt functions
//=========================================
#define ENCRYPT 1
#define DECRYPT 0

void  s_DesInit(void);

void  Lib_des(uchar *input, uchar *output,uchar *deskey, int mode);

void  Lib_DES3_16(uchar *dat,uchar *key,int mode);
void  Lib_DES3_24(uchar *dat,uchar *key,int mode);
void  Lib_RSARecover(uchar *Modul,uint ModulLen,uchar *Exp,uint ExpLen,uchar *DataIn,uchar *DataOut);
void  Lib_Hash(uchar *DataIn, uint DataInLen, uchar *DataOut);
void Lib_3Des(unsigned char *Source, unsigned char *key,unsigned char *Dest, unsigned int  Length, unsigned char Mode);

//===========================================================
// Defined for swapping data between terminal and smart card
//===========================================================

//#pragma pack(1)
//如果PACK（1）表1字节对齐，如果为（2）则2字节对齐
#if 0
typedef struct //__attribute__ ((__packed__))
{
     uchar  Command[4];
     ushort Lc;
     uchar  DataIn[512];
     ushort Le;
}APDU_SEND;

//#pragma pack()

typedef struct //__attribute__ ((__packed__))
{
     ushort LenOut;
     uchar  DataOut[512];
     uchar  SWA;
     uchar  SWB;
}APDU_RESP;
#endif

typedef struct
{
	uchar       CLA;
	uchar       INS;
	uchar       P1;
	uchar       P2;
	uchar       Lc;
	uchar       DataIn[300];
	uchar       LeFlag;
	uchar       Le;
}APDU_SEND;

typedef struct
{
	uint      LenOut;
	uchar       DataOut[300];
	uchar       SWA;
	uchar       SWB;
}APDU_RESP;

#define	ICC_VOL_5V            0x05        //  5V卡
#define	ICC_VOL_3V            0x03        //  3V卡
#define	ICC_VOL_1_8V          0x01        // 1.8V卡

#undef		YES
#undef    	NO                      

#undef    	OK                      
#undef    	ERROR                   

#undef    	ON                      
#undef    	OFF                     

#define     YES                     0x01
#define     NO                      0x00

#define     OK                      0x00
#define     ERROR                   0x01

#define     ON                      0x01
#define     OFF                     0x00

uchar   Lib_IccCommand(uchar slot,APDU_SEND * ApduSend,APDU_RESP * ApduResp);
int   Lib_IccCheck(uchar slot);
uchar   Lib_IccOpen(uchar slot,uchar VCC_Mode,uchar *ATR);
void   Lib_IccClose(uchar slot);
int   Lib_IccSetAutoResp(uchar slot,uchar autoresp);
int   Lib_IccPPS(uchar slot,uchar *pps);
int   s_IccInit(void);

unsigned char Lib_IccDetect(unsigned char slot);
int Lib_IccPsam_adpu(u8 *SW,u8 *input,u16 input_len,u8 *out,u16 *out_len);

//=============================================
//     MagCard Reader Functions
//=============================================

#define  MCR_NOTSWIPED  (-3000)
#define  MCR_CMDSENDERR (-3001)
#define  MCR_CMDRECVERR (-3002)

int   s_McrInit(void);
void  Lib_McrOpen(void);
void  Lib_McrClose(void);
void  Lib_McrReset(void);
int   Lib_McrCheck(void);
int   Lib_McrRead(uchar *track1, uchar *track2, uchar *track3);

//=============================================
//     Asynchronism communication functions
//
//=============================================
#define VCOM1       1
#define VCOM2       2 
#define VCOM_DEBUG  0


#define RS232A     VCOM1
#define RS232B     VCOM2
#define COM1       VCOM1
#define COM2       VCOM2 
//#define COM_DEBUG  VCOM_DEBUG 
#define  COMM_MAX   3

#define  COM_INVALID_PARA     (-6501)
#define  COM_NOT_OPEN         (-6502)
#define  COM_INVALID_PORTNO   (-6503)
#define  COM_RX_TIMEOUT       (-6504)
#define  COM_TX_TIMEOUT       (-6505)
#define  COM_TX_MEMOVER       (-6506)
#define  COM_NO_EMPTYPORT     (-6507)

void s_ComInit(void);
unsigned char  Lib_ComReset(uchar port);
unsigned char  Lib_ComWrite(uchar port,uchar *writebyte,int write_len);
unsigned char  Lib_ComRecvByte(uchar port,uchar *recv_byte,unsigned int waitms);

unsigned char Lib_ComRecv(uchar port,uchar *recv_data,unsigned short max_len,unsigned short *recv_len,unsigned int waitms);

unsigned char  Lib_ComSendByte(uchar port,uchar send_byte);
unsigned char Lib_ComSend(unsigned char channel, unsigned char *str, unsigned short str_len);

unsigned char  Lib_ComClose(uchar port);
unsigned char Lib_ComOpen(unsigned char channel,  char *para);

int Lib_ComRDataFromScan(unsigned char *nRecCmd,unsigned short *nRecLen);

//===========================================
//        Defined for file system
//
//============================================
#define   FILE_EXIST               (-8001)
#define   FILE_NOTEXIST            (-8002)
#define   FILE_MEM_OVERFLOW        (-8003)
#define   FILE_TOO_MANY_FILES      (-8004)
#define   FILE_INVALID_HANDLE      (-8005)
#define   FILE_INVALID_MODE        (-8006)
#define   FILE_NO_FILESYS          (-8007)
#define   FILE_NOT_OPENED          (-8008)
#define   FILE_OPENED              (-8009)
#define   FILE_END_OVERFLOW        (-8010)
#define   FILE_TOP_OVERFLOW        (-8011)
#define   FILE_NO_PERMISSION       (-8012)
#define   FILE_FS_CORRUPT          (-8013)
#define   FILE_INVALID_PARA        (-8014)
#define   FILE_WRITE_ERR           (-8015)
#define   FILE_READ_ERR            (-8016)
#define   FILE_NO_MATCH_RECORD     (-8017)

#define   O_RDWR                   0x01
#define   O_CREATE                 0x02

#define   FILE_SEEK_CUR            0
#define   FILE_SEEK_SET            1
#define   FILE_SEEK_END            2

#define   FLASH_CMD_DELAY          80
#define   WRITE_FLASH_CMD_DELAY    10

typedef struct //__attribute__ ((__packed__))
{
     uchar  fid;
     uchar  attr;
     uchar  type;
     char   name[17];
     ulong  length;
} FILE_INFO;

#define APP_DOWNLOAD_OK_FLAG  "DOWNLOADOK"

extern int errno;

//File operation functions
void s_FileInit(void);
int  Lib_FileOpen(char *filename, uchar mode);
int  Lib_FileRead(int fid, uchar *dat, int len);
int  Lib_FileWrite(int fid, uchar *dat, int len);
int  Lib_FileClose(int fid);
int  Lib_FileSeek(int fid, long offset, uchar fromwhere);
long Lib_FileSize(char *filename);
long Lib_FileFreeSize(void);
int  Lib_FileTruncate(int fid,long len);
int  Lib_FileExist(char *filename);
int  Lib_FileInfo(FILE_INFO* finfo);
int  Lib_FileExOpen(char *filename, uchar mode,uchar* attr);
#if 0
int  Lib_FileRemove(const char *filename);
#endif
uchar  Lib_FileGetEnv(char *name, uchar *value);
uchar  Lib_FilePutEnv(char *name, uchar *value);

int  s_open(char *filename, uchar mode,uchar* attr);
int  s_remove(char *filename, unsigned char *attr);  

//========================================================
//     MultiApplication functions,called by AppManager.
//
//==========================================================
typedef struct //__attribute__ ((__packed__))
{
     uchar Name[32];
     uchar AID[16];
     uchar Version[16];
     //uchar Provider[32];
     //uchar Descript[64];
     uchar LoadTime[14];
     ulong MainEntry;
     ulong EventEntry;
     uchar Num;
     uchar Reserve[73-70];
}APP_MSG;  //

#define MAGCARD_MSG   0x01
#define ICCARD_MSG    0x02
#define KEYBOARD_MSG  0x03
#define USER_MSG      0x04

typedef struct //__attribute__ ((__packed__))
{
     uchar RetCode;
     uchar track1[256];
     uchar track2[256];
     uchar track3[256];
}SET_MAGCARD;

typedef struct //__attribute__ ((__packed__))
{
     int MsgType;           //MAGCARD_MSG,ICCARD_MSG,KEYBOARD_MSG,USER_MSG
     SET_MAGCARD MagMsg;    //MAGCARD_MSG
     uchar KeyValue;        //ICCARD_MSG
     uchar IccSlot;         //KEYBOARD_MSG
     void *UserMsg;         //USER_MSG
}SET_EVENT_MSG;

int Lib_AppReadInfo(uchar AppNo, APP_MSG* ai);
int Lib_AppReadState(uchar AppNo);
int Lib_AppSetActive(uchar AppNo, uchar flag);
int Lib_AppRun(uchar AppNo);
int Lib_AppRunEvent(uchar AppNo, SET_EVENT_MSG *msg);  // ????????


//============================================================
//       USB Host and Device Operation Functions
//============================================================
#define  USBD     0
#define  USBH     1

int  UsbDeviceTest(void);
int  s_UsbDeviceCheck(void);
int  s_InitUsbDevice(void);
int  Usb_Open(uchar port);
int  Usb_Close(uchar port);
int  Usb_Reset(uchar port);
int  Usb_Send(uchar port,uchar *send_data, int send_len);
int  Usb_SendByte(uchar port,uchar send_byte);
int  Usb_Recv(uchar port,uchar *recv_data,int max_len, int *recv_len,int  waitms);
int  Usb_RecvByte(uchar port,uchar *recv_byte,int waitms);

//========================================================
//                   PED AND PCI API
//==========================================================

typedef struct
{
     unsigned int  modlen;           //PIN加密公钥模数长
     unsigned char mod[256];        // PIN加密公钥模数
     unsigned int  explen;            // PIN加密公钥指数长
     unsigned char exp[4];           // PIN加密公钥指数
     unsigned char iccrandomlen;     //从卡行取得的随机数长
     unsigned char iccrandom[8];     //从卡行取得的随机数
     unsigned int  termrandomlen;    //从终端应用取得的填充数长
     unsigned char termrandom[256];   //从终端应用取得的填充数
} RSA_PINKEY;

#define	KEY_MODE_DES			0
#define	KEY_DOUBLE_DES		    1

int  Lib_PciWritePIN_MKey(uchar key_no,uchar key_len,uchar *key_data,uchar mode);
int  Lib_PciWriteMAC_MKey(uchar key_no,uchar key_len,uchar *key_data,uchar mode);
int  Lib_PciWriteWORK_MKey(uchar key_no,uchar key_len,uchar *key_data,uchar *key_crc,uchar mode, uchar mkey_no);
int  Lib_PciWorkMKeyDes(uchar mkey_no, uchar mkey_part, uchar *indata, uchar *outdata, uchar mode);

//int  Lib_PciWritePinKey(uchar key_no,uchar key_len,uchar *key_data, uchar mode, uchar mkey_no);
//int  Lib_PciWriteMacKey(uchar key_no,uchar key_len,uchar *key_data, uchar mode, uchar mkey_no); 
int  Lib_PciWritePinKey(uchar key_no,uchar key_len,uchar *key_data,uchar *key_crc,uchar mode, uchar mkey_no);
int  Lib_PciWriteMacKey(uchar key_no,uchar key_len,uchar *key_data,uchar *key_crc,uchar mode, uchar mkey_no);
int  Lib_PciWriteDesKey(uchar key_no,uchar key_len,uchar *key_data,uchar mode);
int  Lib_PciWriteWorkKey(uchar key_no,uchar key_len,uchar *key_data, uchar *key_crc,uchar mode, uchar mkey_no);

int  Lib_PciDerivePinKey(uchar mkey_n,uchar pinkey_n1,uchar pinkey_n2,uchar mode);
int  Lib_PciDeriveMacKey(uchar mkey_n,uchar mackey_n1,uchar mackey_n2,uchar mode);
 
int  Lib_PciGetPin(uchar pinkey_n,uchar min_len,uchar max_len,uchar *card_no,uchar mode,uchar *pin_block,ushort waittime_sec);
int  Lib_PciGetPinAuto(uchar pinkey_n,uchar min_len,uchar max_len,uchar *card_no,uchar mode,uchar *pin_block,ushort waittime_sec);
int  Lib_PciGetPinFixK(BYTE fixkey_n,BYTE min_len,BYTE max_len,BYTE *card_no,BYTE mode,BYTE *pin_block,ushort waittime_sec);
int  Lib_PciGetMac(uchar mackey_n,ushort inlen,uchar *indata,uchar *macout,uchar mode);

int  Lib_PciGetRnd (uchar *rnd8);
int  Lib_PciAccessAuth(uchar *auth_data,uchar mode);
int  Lib_PciGetOfflinePin(BYTE min_len,BYTE max_len,BYTE *encpin,unsigned short waittime_sec);
int  Lib_PciOffLineEncPin(RSA_PINKEY *rsa_pinkey,uchar min,uchar max,uchar *encpin,ushort waittime_sec);
int  Lib_PciOffLinePlainPin(uchar icc_slot,uchar min,uchar max,uchar *icc_command,uchar *icc_resp,ushort waittime_sec);
int  Lib_PciGetPinDukpt(uchar key_n,uchar min_len,uchar max_len,uchar *card_no,uchar mode,uchar *pin_block,ushort waittime_sec,uchar *out_ksn);
int  Lib_PciGetMacDukpt(uchar key_n,ushort inlen,uchar *indata,uchar *macout,uchar mode,uchar *out_ksn);
 
int  Lib_PciAuthForNumberKey(uchar *authdata);

//uchar Lib_PEDWriteWorkMKey(uchar KeyID,BYTE key_len, uchar *Key,uchar mode, uchar MKeyIndex);
uchar Lib_PEDWriteWorkMKey(uchar KeyID,BYTE key_len, uchar *Key,uchar mode, uchar MKeyIndex,uchar *keykcv);

unsigned char Lib_PEDGetRand(unsigned char out_len ,unsigned char *out_rand);
//uchar Lib_PEDWriteWorkKey( uchar WKeyIndex, uchar key_len ,uchar *Key,BYTE bVeriLen, uchar mode, uchar MKeyIndex);
uchar Lib_PEDWriteWorkKey( uchar WKeyIndex, uchar key_len ,uchar *Key,BYTE bVeriLen, uchar mode, uchar MKeyIndex,uchar *keykcv);


uchar Lib_PEDDes(uchar DESKeyID,unsigned short nInLen, uchar *datain, uchar *dataout,uchar mode);
uchar Lib_PEDGetMac(uchar WKeyID,unsigned short inLen,  uchar *datain,  uchar *macout, uchar mode);
void Lib_PEDWriteMKeyID(uchar mkey_no);
void Lib_PEDReadMkeyID(u8 *Mkey_Index);
void Lib_PEDReadMkeyMode(u8 *Mkey_Mode);
void Lib_PEDWriteMkeyMode(u8 Mkey_Mode);

int  s_PciInit(void);

void vTwoOne(uchar *in, ushort in_len, uchar *out);
int  s_GetLockState(void);

int  s_ReadMDK(uchar *mdk);
int  s_WriteMDK(uchar *mdk); 

extern BYTE g_byCurAppNum;

#define PCI_Locked_Err        (-7000)
#define PCI_KeyType_Err       (-7001)
#define PCI_KeyLrc_Err        (-7002)
#define PCI_KeyNo_Err         (-7003)
#define PCI_KeyLen_Err        (-7004)
#define PCI_KeyMode_Err       (-7005) 
#define PCI_InputLen_Err      (-7006)
#define PCI_InputCancel_Err   (-7007)
#define PCI_InputNotMatch_Err (-7008)
#define PCI_InputTimeOut_Err  (-7009)
#define PCI_CallTimeInte_Err  (-7010) 
#define PCI_NoKey_Err         (-7011)
#define PCI_WriteKey_Err      (-7012)
#define PCI_ReadKey_Err       (-7013)
#define PCI_RsaKeyHash_Err    (-7014)
#define PCI_DataLen_Err       (-7015) 
#define PCI_NoInput_Err       (-7016)
#define PCI_AppNumOver_Err    (-7017) 
#define PCI_ReadMMK_Err       (-7020)
#define PCI_WriteMMK_Err      (-7021) 
#define PCI_Auth_Err          (-7030)
#define PCI_RsaKey_Err        (-7031) 
#define PCI_AuthTimes_Err     (-7032) 
#define PCI_KeySame_Err       (-7040)

//////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////
#define PICC_OK                (0)
#define PICC_ChipIDErr         (-3500)
#define PICC_OpenErr           (-3501)
#define PICC_NotOpen           (-3502)
#define PICC_ParameterErr      (-3503)
#define PICC_TxTimerOut        (-3504)
#define PICC_RxTimerOut        (-3505)
#define PICC_RxDataOver        (-3506)
#define PICC_TypeAColl         (-3507)
#define PICC_FifoOver          (-3508)
#define PICC_CRCErr            (-3509)
#define PICC_SOFErr            (-3510)
#define PICC_ParityErr         (-3511)
#define PICC_KeyFormatErr      (-3512)

#define PICC_RequestErr        (-3513)
#define PICC_AntiCollErr       (-3514)
#define PICC_UidCRCErr         (-3515)
#define PICC_SelectErr         (-3516)
#define PICC_RatsErr           (-3517)
#define PICC_AttribErr         (-3518)
#define PICC_HaltErr           (-3519)
#define PICC_OperateErr        (-3520)
#define PICC_WriteBlockErr     (-3521)
#define PICC_ReadBlockErr      (-3522)
#define PICC_AuthErr           (-3523)
#define PICC_ApduErr           (-3524)
#define PICC_HaveCard          (-3525)   //有卡
#define PICC_Collision         (-3526) //多卡
#define PICC_CardTyepErr       (-3527) //A 卡发送RATS 
#define PICC_CardStateErr      (-3528)

int  s_PiccInit(void);
int  Lib_PiccOpen(void);
int  Lib_PiccClose(void);
int  Lib_PiccCheck(uchar mode,uchar *CardType,uchar *SerialNo);
int  Lib_PiccCommand(APDU_SEND *ApduSend, APDU_RESP *ApduResp);
int  Lib_PiccM1Authority(uchar Type,uchar BlkNo,uchar *Pwd,uchar *SerialNo);
int  Lib_PiccM1ReadBlock(uchar BlkNo,uchar *BlkValue);
int  Lib_PiccM1WriteBlock(uchar BlkNo,uchar *BlkValue);
int  Lib_PiccM1Operate(uchar Type,uchar BlkNo,uchar *Value,uchar UpdateBlkNo);
void Lib_PiccHalt(void);
int  Lib_PiccReset(void);
int  Lib_PiccRemove(void);
//========================================================
//                   Local Download API
//========================================================== 
#if 0 //12/10/28 disable
#define  DOWN_RECV_BUFFLEN      (16*1024)
#define  DOWN_SEND_BUFFLEN      (8*1024) 
#endif

#define  USBD_DOWN_MODE     0
#define  UART_DOWN_MODE     1

int  Down_RecvByte(uchar *recv_byte,int waitms);
int  Down_Recv(uchar *recv_data,int max_len,int *recv_len,int waitms);
int  Down_SendByte(uchar send_byte);
int  Down_Send(uchar *send_data,int send_len);
int  Down_Reset(void);
int  Down_Open(void);
int  Down_Close(void); 

#define FONT_NOEXISTERR        (-1600)
#define FONT_NOSUPPORTERR      (-1601)

//font api
void InitFontLib(void);
int  Lib_FontFileCheck(void);
int  Lib_FontGetCharSet(BYTE *bCharSet, BYTE *bNum);
int  Lib_FontGetHeight(BYTE bCharSet, BYTE *bHeight, BYTE * bHeightNum);
//int  Lib_FontGetStyle(VFONT_LIB_STRUCT *style_info); 
//usb api
void s_UdpInit(void);   

extern int mysprintf(char * buf, const char *fmt, ...);

//========================================================
//                   VOICE API
//==========================================================
#define VOICE_PLS_INPUT_PWD					1		//请输入密码
#define VOICE_PLS_INPUT_PWD_AGAIN		    2		//请重新输入密码
#define VOICE_PWD_ERR						3		//密码错误
#define VOICE_PLS_SWIPE_MAGCARD				4		//请刷卡
#define VOICE_PLS_INSERT_ICCARD				5		//请插入IC卡
#define VOICE_TRADE_SUCCESS					6		//交易成功
#define VOICE_TRADE_FAILER					7		//交易失败
#define VOICE_WELCOME						8		//欢迎光临
#define VOICE_THANKS_PATRONAGE				9		//谢谢惠顾
#define VOICE_THANKS_USE					10		//谢谢使用
#define VOICE_COMM_FAILER					11		//通信失败
#define VOICE_BALANCE_LACK					12		//余额不足

#define VOICE_ID_ERR					    (-920)	//声音编号错误

int SetVoice(uchar voiceID);

//========================================================
//                   USB Device API
//========================================================== 

#define USBD_SUCCESS          (0)
#define USB_INVALID_PORT      (-6300)
#define USBD_NOT_CONFIG       (-6301)
#define USB_SEND_OVERFLOW     (-6302)
#define USB_RECV_TIMEOUT      (-6303)
#define USB_RECV_OVERFLOW     (-6304)
#define USB_SEND_TIMEOUT      (-6305)
#define USB_NOT_CONNECT       (-6306) 

int Lib_UsbOpen(uchar port); 
int Lib_UsbClose(uchar port);
int Lib_UsbReset(uchar port);
int Lib_UsbSend(uchar port,uchar *send_data, int send_len);
int Lib_UsbSendByte(uchar port,uchar send_byte);
int Lib_UsbRecv(uchar port,uchar *recv_data,int max_len, int *recv_len,int  waitms);
int Lib_UsbRecvByte(uchar port,uchar *recv_byte,int waitms);

//========================================================
//                   Battery API
//========================================================== 

#define BATT_SUPPLY		0xA0    //市电
#define BATT_NOEXIST	0xA1	//电池不存在
#define BATT_CHARGE		0xA2	//充电
unsigned char   Lib_BattExist (void);
unsigned char   Lib_BattSource(void);
unsigned char   Lib_BattVol (unsigned char *pVol);
void   Lib_BattDispVol (void);

//========================================================
//                   Printer API
//========================================================== 

#define PRN_OK					0	// 就绪 OK
#define PRN_BUSY				0x70	// 忙
#define PRN_NOPAPER				0x72	// 缺纸
#define PRN_TEMPARATURE			0x73	// 过热
#define PRN_FAULT				0x74	// 故障
#define PRN_PRINTING			0x75	// 正在打印
#define PRN_OVERFLOW			0x76	// 缓冲溢出

#define PRN_ZOOM_NORMAL			0	// 正常打印 (必须与内核的定义一致)
#define PRN_ZOOM_WIDTH			1	// 倍宽打印 
#define PRN_ZOOM_HEIGHT			2	// 倍高打印
#define PRN_ZOOM_BOTH			3	// 倍宽倍高打印

#define PRN_FONT12				12
#define PRN_FONT16				16
#define PRN_FONT24				24
#define PRN_FONT32				32

unsigned char Lib_PrnStatus(void);
void Lib_PrnFontSet(unsigned char asc_height, unsigned char han_height, unsigned char *buff,unsigned short *pnLen);
unsigned char Lib_PrnStr(unsigned char *buff,unsigned short *nLen,const char *fmt, ...);



//========================================================
//                   Convert
//========================================================== 
#define SetTimer			Lib_SetTimer
#define CheckTimer			Lib_CheckTimer
//#define DelayMs				Lib_DelayMs

#if 0
#define Beep				Lib_Beep
#endif

#define Beef				Lib_Beef

#define Lcd_Cls				Lib_ScrCls
//#define Lcd_ClrLine(start, end) \
//		Lib_LcdClrLine((start)*8/2, (end)*8/2)

#if 0
#define Lcd_ClrLine(start, end) \
		Lib_ScrClrLine(start, end)
#endif

#define Lcd_SetBackLight	Lib_LcdSetBackLight
#define Lcd_SetGray			Lib_LcdSetGray
#define Lcd_Gotoxy(x, y) \
		Lib_LcdGotoxy((x)*8/2, (y)*8/2)
#define Lcd_SetFont			Lib_LcdSetFont
#define Lcd_GetFont			Lib_LcdGetFont
#define Lcd_SetAttr			Lib_LcdSetAttr
#define Lcd_printf			Lib_Lcdprintf
//#define Lcd_Printxy(x, y, mode, arg...)	\

#if 0
#define Lcd_Printxy(x, y, mode, arg)\
        Lib_LcdPrintxy((x)*8/2, (y)*8/2, mode, arg)
#endif
                  
#define Lcd_DrawPlot		Lib_LcdDrawPlot
#define Lcd_DrawLogo		Lib_LcdDrawLogo

#define  Kb_GetKey			Lib_KbGetCh
#define  Kb_Hit				Lib_KbCheck
#define  Kb_Flush			Lib_KbFlush

#define Picc_Open			Lib_PiccOpen
#define Picc_Close			Lib_PiccClose
#define	Picc_Check			Lib_PiccCheck
#define	Picc_Command		Lib_PiccCommand
#define	Picc_Halt			Lib_PiccHalt
#define	Picc_Reset			Lib_PiccReset
#define	Picc_Remove			Lib_PiccRemove

//========================================================
//                   GPRS(WNET) Device API
//========================================================== 
#define WNET_OK			0x00	//return successfully
#define WNET_ERR		0x10	//error occurred
#define WNET_NORSP		0x11	//no response from the module
#define WNET_RSPERR		0x12	//"ERROR" is return from the module
#define WNET_NOSIM		0x13	//SIM/UIM card is not inserted or not detected
#define WNET_NEEDPIN	0x14	//SIM PIN is required
#define WNET_NEEDPUK	0x15	//SIM PUK is required
#define WNET_SIMBLOCKED	0x16	//SIM Card is permanently blocked
#define WNET_SIMERR		0x17	//SIM card does not exist or needs SIM PIN
#define WNETT_PINERR	0x18	//SIM PIN is incorrect
#define WNET_NOTDIALING	0x19	//the module is not in dialing status
#define WNET_PARAMERR	0x1A	//parameter error
#define WNET_FORMATERR	0x1B	//Format error
#define WNET_SNLTOOWEAK	0x1C	//the signal is too weak, please check the antenna
#define WNET_LINKCLOSED	0x1D	//the module is offline
#define WNET_LINKOPENED	0x1E	//the module is online
#define WNET_LINKOPENING 0x1F	//the module is connecting to the network
#define WNET_TCPCLOSED	0x20	//tcp socket is closed
#define WNET_TCPOPENED	0x21	//tcp socket is opened
#define WNET_TCPOPENING	0x22	//the module is trying to open a TCP socket
#define WNET_ATTACHED	0x23	//Attached
#define WNET_DETTACHED	0x24	//Dettached
#define WNET_ATTACHING	0x25	//the module is looking for the base station.
#define WNET_NOBOARD	0x26	//no GPRS or CDMA board exist
#define WNET_PORTERR	0x27	//serial port error
#define WNET_PORTINUSE	0x28	//serial port is in use by another program
#define WNET_ABNORMAL	0x29	//abnormal error
#define WNET_CANCEL	    0x2A    //hit "CANCEL"   手动退出

unsigned char Lib_WNetInit(void);
unsigned char Lib_WNetCheckSignal(unsigned char *pSignalLevel);
unsigned char Lib_WNetCheckSim(void);
unsigned char Lib_WNetDial(unsigned char *DialNum, unsigned char * reserved1, unsigned char * reserved2);
unsigned char Lib_WNetCheck(void);
//unsigned char Lib_WNetTcpConnect(unsigned char *DestIP, unsigned char *DestPort);
unsigned char Lib_WNetTcpConnect(unsigned char *DestIP, unsigned char *DestPort, unsigned char *DestIP2, unsigned char *DestPort2,unsigned char *DestAPN);

unsigned char Lib_WNetTcpSend(unsigned char *TxData, unsigned short txlen);
unsigned char Lib_WNetTcpRecv(unsigned char *RxData, /*unsigned short*/int  *prxlen, unsigned short ms,u8 mode);
unsigned char Lib_WNetTcpClose(void);
unsigned char Lib_WNetLinkCheck(void);
unsigned char Lib_WNetClose(void);
unsigned char Lib_WNetTcpCheck(void);
unsigned char Lib_WNetReset(void);
unsigned char Lib_WNetSendCmd(unsigned char *cmd,unsigned char *rsp, 
							   		    unsigned short rsplen, unsigned short ms,unsigned char restype);
unsigned char Lib_WNetGetLocation(unsigned char *sLocation);

//依次是:GSM_State,GSM_State1,GSM_State2,Http_State
unsigned char Lib_WNetCmdCheck(unsigned char *pState);
unsigned char Lib_WNetCmdRecv(unsigned char *RxData, int  *prxlen, unsigned short ms);


#endif

har Lib_WNetCmdRecv(unsigned char *RxData, int  *prxlen, unsigned short ms);


#endif

